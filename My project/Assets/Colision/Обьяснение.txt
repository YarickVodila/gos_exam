В Unity, методы OnCollisionEnter, OnCollisionStay, и OnCollisionExit являются частью физической системы и используются для обработки взаимодействий между объектами с коллайдерами, когда физика включена. Вот описание каждого метода:

1. OnCollisionEnter: Вызывается, когда коллайдер на данном игровом объекте начинает столкновение с другим коллайдером. Этот метод вызывается один раз в начале контакта.

2. OnCollisionStay: Вызывается каждый кадр на протяжении времени, когда коллайдер продолжает пересекаться с другим коллайдером.

3. OnCollisionExit: Вызывается, когда коллайдер перестал касаться другого коллайдера. Этот метод вызывается один раз, когда столкновение заканчивается.

Метод OnCollisionEnter обладает параметром Collision collision, который содержит несколько свойств:

- collider: Коллайдер объекта, с которым произошло столкновение.
- contacts: Массив контактных точек, где произошло столкновение. Каждая точка контакта имеет свои собственные свойства, как point (место контакта), normal (нормаль пересечения в точке контакта) и другие.
- relativeVelocity: Вектор относительной скорости двух объектов в момент столкновения.
- rigidbody: Твердотельный компонент (Rigidbody) данного объекта (если присутствует).
- transform: Трансформ компонент объекта, с которым произошло столкновение.

Теперь предоставлю примеры для каждого из методов:

OnCollisionEnter пример:
void OnCollisionEnter(Collision collision)
{
    if (collision.collider.CompareTag("Enemy"))
    {
        Debug.Log("Contact with enemy!");
        // Это может быть взрыв, урон врагу, изменение цвета и так далее.
    }
}


OnCollisionStay пример:
void OnCollisionStay(Collision collision)
{
    if (collision.collider.CompareTag("MovingPlatform"))
    {
        Debug.Log("Standing on a moving platform.");
        // Можете использовать это, чтобы заставить игрока двигаться вместе с платформой.
    }
}


OnCollisionExit пример:
void OnCollisionExit(Collision collision)
{
    if (collision.collider.CompareTag("Water"))
    {
        Debug.Log("No longer in contact with water.");
        // Используйте для изменения состояния игрока (например, отключение эффекта медленного движения в воде).
    }
}


Используя свойства из параметра Collision collision, вы можете определять в точности, с чем происходит столкновение и как с этим взаимодействовать. Например, collision.contacts можно использовать для определения точного места на вашем объекте, где произошло столкновение и применить взрывной эффект именно в этой точке:

Использование свойств OnCollisionEnter параметра Collision:
void OnCollisionEnter(Collision collision)
{
    foreach (ContactPoint contact in collision.contacts)
    {
        Debug.DrawRay(contact.point, contact.normal, Color.red, 2.0f);
        // Можно создать взрыв или визуальный эффект в точке столкновения.
    }
    if (collision.relativeVelocity.magnitude > 2)
    {
        // Если скорость столкновения велика, можете, например, нанести урон.
        Debug.Log("Hard hit!");
    }
}


Из этого примера вы видите, как можно использовать точки контакта и относительную скорость для добавления реалистичной реакции на столкновения в вашей игре.